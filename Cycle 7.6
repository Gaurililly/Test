importjava.awt.* importjavax.swing.":

publicclassWavePrintextendsJPanel
{}

Intcycles:

intSCALEFACTOR-200; intpoints: int[]pts:

double[]sines;

publicvoidsetCycles(intcycles)
{


this.cycles-cycles: this points-SCALEFACTOR"cycles 2 this.sines-newdouble[points] for (inti-Oi<points:i++)

doubleradians (Math.PI/SCALEFACTOR)*|-- this.sines[i]-Math.sin(radians):
}


publicvoidpaintComponent (Graphicsg)
{
doublehstep=(double)maxWidth/(double)points:

intmaxWidth-getWidth(): intmaxHeight-getHeight() pts-newint[points]: for (inti=0;i<points;i++)

pts[i]=(int)(sines[i]*maxHeight/2.95+maxHeight/2):

g.setColor(Color.BLUE); for (inti=1;i<points;i++)

intx1-(int)((-1) "hstep); int*2=(int)(i^ * hstep ;

inty1=pts[i-1]:

inty * 2 = pts[i]

g.drawLine ( x 1.y1.*2.y2);
}
publicstaticvoid main(String[]args)

{
Frame.setDefaultLookAndFeelDecorated(true): JFrameframe-new.JFrame("Printthewavepattern"); frame.setDefaultCloseOperation(JFrame EXIT_ON_CLOSE): frame.setBackground(Color.white): frame setSize(500,200)

WavePrintsw-newWavePrint() sw.setCycles(10).

frame.add(sw) frame.setVisible(true);
}
}
